---
// Import CSS module
import styles from "../styles/Header.module.css";

// Define navigation items with icon names
const navItems = [
  { name: "Home", url: "/", icon: "home" },
  { name: "About Me", url: "#about", icon: "user" },
  { name: "Experience", url: "#experience", icon: "briefcase" },
  { name: "Education", url: "#education", icon: "graduation-cap" },
  { name: "Skills", url: "#skills", icon: "cog" },
  { name: "Projects", url: "#projects", icon: "code-branch" },
  { name: "Contact", url: "#contact", icon: "envelope" },
];

// Get current path to highlight active link
const currentPath = Astro.url.pathname;
---

<header class={styles.a1b2} id="main-header">
  <div class={styles.c3d4}>
    <!-- Improved frosted glass effect background -->
    <div class={styles.e5f6}></div>

    <div class={styles.g7h8}>
      <!-- Enhanced logo/name with subtle animation -->
      <a href="/" class={styles.i9j0}>
        <span class={styles.k1l2}>G</span>ian
        <span class={styles.m3n4}>Raphael</span>
        <span class={styles.o5p6}></span>
      </a>

      <!-- Refined desktop navigation with smoother animations -->
      <nav class={styles.q7r8}>
        <ul class={styles.s9t0}>
          {
            navItems.map((item) => {
              const isActive =
                currentPath === item.url ||
                (item.url !== "/" && currentPath.startsWith(item.url));
              return (
                <li>
                  <a
                    href={item.url}
                    class={`${styles.u1v2} ${
                      isActive ? styles.w3x4 : styles.y5z6
                    }`}
                  >
                    <i class={`fas fa-${item.icon} ${styles.a7b8}`} />
                    <span class={styles.c9d0}>{item.name}</span>
                    <span
                      class={`${styles.e1f2} ${
                        isActive ? styles.g3h4 : styles.i5j6
                      }`}
                    />
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>

      <!-- Refined mobile menu button with smoother animation -->
      <button
        id="mobile-menu-button"
        class={styles.k7l8}
        aria-label="Toggle menu"
      >
        <div class={styles.m9n0}>
          <span id="line-1" class={styles.o1p2}></span>
          <span id="line-2" class={styles.q3r4}></span>
          <span id="line-3" class={styles.s5t6}></span>
        </div>
      </button>
    </div>
  </div>

  <!-- Enhanced mobile navigation overlay with smoother transitions -->
  <div id="mobile-menu" class={styles.u7v8}>
    <nav class={styles.w9x0}>
      <ul class={styles.y1z2}>
        {
          navItems.map((item, index) => (
            <li class={styles.a3b4}>
              <a
                href={item.url}
                class={styles.c5d6}
                data-mobile-link
                data-index={index}
              >
                <i class={`fas fa-${item.icon} ${styles.e7f8}`} />
                {item.name}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu") as HTMLElement;
    const line1 = document.getElementById("line-1") as HTMLElement;
    const line2 = document.getElementById("line-2") as HTMLElement;
    const line3 = document.getElementById("line-3") as HTMLElement;
    const mobileLinks = document.querySelectorAll(
      "[data-mobile-link]"
    ) as NodeListOf<HTMLElement>;
    const navContainer = document.querySelector(
      "#mobile-menu nav"
    ) as HTMLElement;
    const header = document.getElementById("main-header") as HTMLElement;

    let isOpen = false;

    if (
      mobileMenuButton &&
      mobileMenu &&
      line1 &&
      line2 &&
      line3 &&
      navContainer
    ) {
      // Enhanced toggle menu function with smoother animations
      const toggleMenu = () => {
        isOpen = !isOpen;

        // Animate the menu overlay with opacity and pointer events
        if (isOpen) {
          mobileMenu.style.opacity = "1";
          mobileMenu.style.pointerEvents = "auto";
          navContainer.style.transform = "translateY(0)";

          // Staggered animation for links
          mobileLinks.forEach((link, index) => {
            setTimeout(
              () => {
                link.style.opacity = "1";
                link.style.transform = "translateY(0)";
              },
              100 + index * 50
            );
          });
        } else {
          // Reset links first (in reverse order)
          [...mobileLinks].reverse().forEach((link, index) => {
            setTimeout(() => {
              link.style.opacity = "0";
              link.style.transform = "translateY(20px)";
            }, index * 30);
          });

          // Then hide the menu after links are hidden
          setTimeout(
            () => {
              mobileMenu.style.opacity = "0";
              mobileMenu.style.pointerEvents = "none";
              navContainer.style.transform = "translateY(8px)";
            },
            mobileLinks.length * 30 + 100
          );
        }

        // Enhanced hamburger to X animation
        if (isOpen) {
          line1.style.transform = "translateY(0.5rem) rotate(45deg)";
          line2.style.opacity = "0";
          line3.style.transform = "translateY(-0.5rem) rotate(-45deg)";
        } else {
          line1.style.transform = "translateY(0) rotate(0)";
          line2.style.opacity = "1";
          line3.style.transform = "translateY(0) rotate(0)";
        }
      };

      // Toggle on button click
      mobileMenuButton.addEventListener("click", toggleMenu);

      // Close menu when a link is clicked
      mobileLinks.forEach((link) => {
        link.addEventListener("click", () => {
          if (isOpen) toggleMenu();
        });
      });

      // Close menu on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && isOpen) toggleMenu();
      });
    }

    // Enhanced header scroll effect with smoother transitions
    if (header) {
      let lastScrollY = window.scrollY;
      let ticking = false;

      const updateHeader = () => {
        if (window.scrollY > 50) {
          header.style.paddingTop = "0.5rem";
          header.style.paddingBottom = "0.5rem";
          header.style.boxShadow = "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)";
        } else {
          header.style.paddingTop = "0.75rem";
          header.style.paddingBottom = "0.75rem";
          header.style.boxShadow = "none";
        }

        ticking = false;
      };

      window.addEventListener("scroll", () => {
        lastScrollY = window.scrollY;

        if (!ticking) {
          window.requestAnimationFrame(() => {
            updateHeader();
            ticking = false;
          });

          ticking = true;
        }
      });
    }
  });
</script>
